Please list your group members here and answer all questions below.
Group members:Alex Huang Xiaowen Ma 
2. 5, 10
3. The while loop in insertion_sort cannot stop because it does not have an argument to increment on i. 
I added a line to ++i and it worked.   
4. The middle index is calculated in the wrong way. It should be (start + end)/2 but instead was (start + end). 
That causes the index out of bound error. Fixed that by adding /2.
5. The program gets the wrong answer because it used middle_value = value in if statement, which in this case needs
a boolean as a comparison. I changed it to iddle_value == value and it worked. 
6. The change was easy since i only need to change WINNINGNUMBERS in lottery.h
_________________________________________________________________________________________________________________________________
Author: Jon Shidal

CSE 332S - Debugging practice

This program plays a simple lottery game. A user inputs their chosen numbers on the command line (1-MAXNUMBER). The program then:
1. generates a list of winning numbers
2. sorts that list
3. uses binary search on the sorted list to determine how many user chosen numbers match the winning numbers
4. outputs the winning numbers and whether or not the user won(you win if more than half of the numbers you supply via the command line are winning numbers) 

Possible program return values:
Enums for theses can be found in lottery.h
0 - NOTAWINNER
1 - WINNER
2 - JACKPOT 
-1 - INCORRECTUSAGE

Program parameters and their default values:
Enum for these can be found in lottery.h
MAXNUMBER = 100   (numbers generated by the program will range from 1 - MAXNUMBER)
WINNINGNUMBERS = 20 (how many winning numbers will be generated)
USERNUMBERS = 5 (how many user supplied numbers the program expects, as command line arguments)


